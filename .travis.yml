os: linux
dist: xenial

language: php

## Cache composer and apt downloads.
cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

php:
  - 5.6
  - 7.0
  - 7.1
  - 7.2

env:
  jobs:
    # `master`, i.e PHPCS 3.x.
    - PHPCS_VERSION="dev-master" LINT=1
    # Lowest supported PHPCS version.
    - PHPCS_VERSION="2.6.0"

# Define the stages used.
# For non-PRs, only the quicktest stage is run.
# For pull requests and merges, the full script is run (skipping quicktest).
# Note: for pull requests, "master" is (currently) the base branch name.
# See: https://docs.travis-ci.com/user/conditions-v1
stages:
  - name: quicktest
    if: type = push AND branch NOT IN (master, develop)
  - name: test
    if: branch IN (master, develop)
  - name: coverage
    if: branch IN (master, develop)

jobs:
  fast_finish: true
  include:
    #### QUICK TEST STAGE ####
    # This is a much quicker test which only runs the unit tests and linting against the low/high
    # supported PHP/PHPCS combinations.
    # These are basically the same builds as in the Coverage stage, but then without doing
    # the code-coverage.
    - stage: quicktest
      php: 7.4
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 7.3
      env: PHPCS_VERSION="2.6.0"
    # PHP 7.3+ is only fully supported icw PHPCS 2.9.2 and 3.3.1+.
    - php: 7.2
      env: PHPCS_VERSION="3.1.0" LINT=1

    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION=">=2.6,<3.0"
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="2.6.0"

    #### TEST STAGE ####
    # Normal builds for PHP 5.5, defined here as they need trusty.
    - stage: test
      php: 5.5
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="2.6.0"
    # In addition to the matrix defined above, test against a variation of PHPCS 2.x and 3.x versions.
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="3.1.0" LINT=1
    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="2.7.*"
    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="3.2.*"
    - php: 5.6
      env: PHPCS_VERSION="2.8.*"
    - php: 7.0
      env: PHPCS_VERSION="2.6.*"
    - php: 7.1
      env: PHPCS_VERSION="3.1.*"
    - php: 7.2
      env: PHPCS_VERSION="3.3.*"
    # Note: PHP 7.3+ is only fully supported icw PHPCS 2.9.2 and 3.3.1+.
    # While on PHPCS 2.x, the tests won't fail, on PHPCS 3.x < 3.3.1, they will.
    - php: 7.3
      env: PHPCS_VERSION="3.4.*" LINT=1
    - php: 7.3
      env: PHPCS_VERSION="dev-master"
    - php: 7.4
      env: PHPCS_VERSION=">=2.6,<3.0" LINT=1
    - php: 7.4
      env: PHPCS_VERSION="2.6.0"

    # And start testing against the upcoming PHPCS 4.x release.
    - php: 7.4
      env: PHPCS_VERSION="4.0.x-dev@dev"

    - php: "nightly"
      env: PHPCS_VERSION="dev-master" LINT=1


    #### CODE COVERAGE STAGE ####
    # N.B.: Coverage is only checked on the lowest and highest stable PHP versions for all PHPCS versions.
    # These builds are left out off the "test" stage so as not to duplicate test runs.
    #
    # The `CUSTOM_INI` configuration is used to allow testing with different PHP ini settings.
    # Added against one high/high and one low/medium build, though having separate builds for this
    # would be preferred.
    # Docs: https://docs.travis-ci.com/user/languages/php/#custom-php-configuration
    - stage: coverage
      php: 7.4
      env: PHPCS_VERSION="dev-master" COVERALLS_VERSION="^2.0" CUSTOM_INI=1
    - php: 7.3
      env: PHPCS_VERSION="2.6.0" COVERALLS_VERSION="^2.0"
    # PHP 7.3+ is only fully supported icw PHPCS 2.9.2 and 3.3.1+.
    - php: 7.2
      env: PHPCS_VERSION="3.1.0" COVERALLS_VERSION="^2.0"

    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="dev-master" COVERALLS_VERSION="^1.0"
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION=">=2.6,<3.0" COVERALLS_VERSION="^1.0" CUSTOM_INI=1
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="2.6.0" COVERALLS_VERSION="^1.0"

  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"
    - env: PHPCS_VERSION="4.0.x-dev@dev"

before_install:
  # Speed up build time by disabling Xdebug when its not needed.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Coverage" ]]; then
      phpenv config-rm xdebug.ini || echo 'No xdebug config.'
    fi

  # On stable PHPCS versions, allow for PHP deprecation notices.
  # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
  - |
    if [[ $PHPCS_VERSION != "dev-master" ]]; then
      echo 'error_reporting = E_ALL & ~E_DEPRECATED' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi

  # Allow for testing with different PHP ini configurations.
  - |
    if [[ "$CUSTOM_INI" == 1 ]]; then
      echo 'short_open_tag = On' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi
  # Turn on Xdebug code coverage mode in case Xdebug 3 is being used.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      echo 'xdebug.mode = coverage' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi

  # Set up test environment using Composer.
  - travis_retry composer require --no-update squizlabs/php_codesniffer:${PHPCS_VERSION}
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      travis_retry composer require --no-update php-coveralls/php-coveralls:${COVERALLS_VERSION}
    fi
  # --prefer-dist will allow for optimal use of the travis caching ability.
  - |
    if [[ $TRAVIS_PHP_VERSION == "nightly" ]]; then
      # Temporary fix - PHPUnit 9.3 is buggy when used for code coverage, so not allowed "normally".
      # As PHP 8 doesn't run code coverage, we can safely install it there though.
      travis_retry composer require --no-update phpunit/phpunit:"^9.3"
      # Not all PHPUnit dependencies have stable releases yet allowing for PHP 8.0.
      travis_retry composer install --prefer-dist --no-suggest --ignore-platform-reqs
    else
      # Remove devtools as it would block install on old PHPCS versions (< 3.0).
      travis_retry composer remove --dev phpcsstandards/phpcsdevtools --no-update
      travis_retry composer install --prefer-dist --no-suggest
    fi

before_script:
  - if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then mkdir -p build/logs; fi
  - phpenv rehash

script:
  # Lint all PHP files against parse errors.
  - if [[ "$LINT" == "1" ]]; then composer lint; fi

  # Run the unit tests.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Quicktest" || "${TRAVIS_BUILD_STAGE_NAME^}" == "Test" ]]; then
      vendor/bin/phpunit --no-coverage
    elif [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      vendor/bin/phpunit
    fi

after_success:
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" && $COVERALLS_VERSION == "^1.0" ]]; then
      php vendor/bin/coveralls -v -x build/logs/clover.xml
    fi
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" && $COVERALLS_VERSION == "^2.0" ]]; then
      php vendor/bin/php-coveralls -v -x build/logs/clover.xml
    fi
