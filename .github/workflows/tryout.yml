name: Test

on:
  # Run on pushes, including merges, to `master` and on all pull requests.
  push:

jobs:
  #### TEST & CODE COVERAGE STAGE ####
  # N.B.: Coverage is only checked on the lowest and highest stable PHP versions
  # and low/high of each major for PHPCS.
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      # Optional keys:
      # - coveralls: whether or not to run code coverage.
      #   Set to the version of the PHP Coveralls package to use to turn coverage on.
      # - custom_ini: whether to run with specific custom ini settings to hit very specific
      #   code conditions. Only used in code coverage builds.
      # - experimental: whether the build is "allowed to fail".
      matrix:
        # The GHA matrix works different from Travis.
        # You can define jobs here and then augment them with extra variables in `include`,
        # as well as add extra jobs in `include`.
        # @link https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        #
        # IMPORTANT: test runs shouldn't fail because of PHPCS being incompatible with a PHP version.
        # - PHPCS will run without errors on PHP 5.4 - 7.2 on any version.
        # - PHP 7.3 needs PHPCS 2.9.2 and 3.3.1+ to run without errors.
        #   On PHPCS 2.x our tests won't fail though, but on PHPCS 3.x < 3.3.1 they will.
        # - PHP 7.4 needs PHPCS 3.5.0+ to run without errors.
        #   On PHPCS 2.x our tests won't fail though, but on PHPCS 3.x < 3.5.0 they will.
        # - PHP 8.0 needs PHPCS 3.5.7+ to run without errors, which is why it is not included in the matrix.
        #   Builds against PHP 8.0 are added via `include`.
        php: ['5.4', '7.4']
        phpcs_version: ['2.6.0', 'dev-master']
#        custom_ini: [false]
#        coveralls: [false]
        experimental: [false]

        include:
          # Augment select builds set up by the above matrix by setting additional properties.
          - php: '7.3'
            phpcs_version: '2.6.0'
            coveralls: '^2.4'        # Code coverage build.
            experimental: false
          - php: '5.4'
            phpcs_version: 'dev-master'
            coveralls: '^1.0'        # Code coverage build.

          # In addition to the matrix defined above, test against a variation of PHPCS 2.x and 3.x versions
          # and add some more specific code coverage builds.
          - php: '8.0'
            phpcs_version: 'dev-master'
            custom_ini: true
            coveralls: '^2.4'        # Code coverage build.
            experimental: false
          - php: '8.0'
            phpcs_version: '~3.5.7'
            experimental: false

          # Experimental builds. These are allowed to fail.
          - php: '7.4'
            phpcs_version: '4.0.x-dev@dev'
            experimental: true
          - php: '8.1' # Nightly.
            phpcs_version: 'dev-master'
            experimental: true

#    name: "${{ if [ matrix.coveralls != "false" ]; then echo "Cov"; else echo "Test"; fi }}: PHP ${{ matrix.php }} - PHPCS ${{ matrix.phpcs_version }}"
    name: "Test: PHP ${{ matrix.php }} - PHPCS ${{ matrix.phpcs_version }} ${{ matrix.coveralls }}"

    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup variables
        id: vars
        run: |
          # On stable PHPCS versions, allow for PHP deprecation notices.
          # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
          # Also set the "short_open_tag" ini to make sure specific conditions are tested.
          if [ ${{ matrix.custom_ini }} == "true" ]; then
            if [ "${{ matrix.phpcs_version }}" != "dev-master" ]; then
              echo '::set-output name=PHP_INI::error_reporting=E_ALL & ~E_DEPRECATED, short_open_tag=On'
            else
              echo '::set-output name=PHP_INI::short_open_tag=On'
            fi
          else
            if [ "${{ matrix.phpcs_version }}" != "dev-master" ]; then
              echo '::set-output name=PHP_INI::error_reporting=E_ALL & ~E_DEPRECATED'
            else
              echo '::set-output name=PHP_INI::error_reporting=E_ALL'
            fi
          fi

          # Set the code coverage driver and make a variable available to easily check whether code coverage is on.
          if [ "${{ matrix.coveralls }}" != '' ]; then
            echo '::set-output name=PHP_CC_DRIVER::xdebug'
            echo '::set-output name=CC::on'
          else
            echo '::set-output name=PHP_CC_DRIVER::none'
            echo '::set-output name=CC::off'
          fi

      - name: Verify set variables
        run: |
          echo PHP_INI is - "${{ steps.vars.outputs.PHP_INI }}"
          echo PHP_CC_DRIVER is - "${{ steps.vars.outputs.PHP_CC_DRIVER }}"
          echo CC is - "${{ steps.vars.outputs.CC }}"
          echo PHP8 is - "${{ startsWith( matrix.php, '8' ) }}"




      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: ${{ steps.vars.outputs.PHP_INI }}
          coverage: ${{ steps.vars.outputs.PHP_CC_DRIVER }}

      - name: 'Composer: set PHPCS version for tests'
        run: |
          # Remove devtools as it would block install on old PHPCS versions (< 3.0).
          composer remove --no-update --dev phpcsstandards/phpcsdevtools
          composer require --no-update squizlabs/php_codesniffer:"${{ matrix.phpcs_version }}"

      - name: 'Composer: conditionally tweak PHPUnit version'
        # TODO: this will need fixing
        if: ${{ steps.vars.outputs.CC == 'off' && startsWith( matrix.php, '8' ) }}
        # Temporary fix - PHPUnit 9.3+ is buggy when used for code coverage, so not allowed "normally".
        # For tests which don't run code coverage, we can safely install it for PHP 8 though.
        run: composer require --no-update phpunit/phpunit:"^9.3"

      - name: 'Composer: conditionally add coveralls'
        # TODO: this will need fixing
        if: ${{ steps.vars.outputs.CC == 'on' }}
        # While only needed on success, doing this before the Composer install makes sure the download is cached.
        run: composer require --no-update --dev php-coveralls/php-coveralls:"${{ matrix.coveralls }}"

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies - normal
        # TODO: this will need fixing
        if: ${{ steps.vars.outputs.CC == 'off' || startsWith( matrix.php, '8' ) == false  }}
        uses: "ramsey/composer-install@v1"

      # For the coverage builds, we need to install with ignore platform reqs as we're using PHPUnit < 9.3.
      - name: Install Composer dependencies - with ignore platform
        if: ${{ steps.vars.outputs.CC == 'on' && startsWith( matrix.php, '8' ) }}
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: --ignore-platform-reqs

      - name: Run the unit tests
        # TODO: this will need fixing
        if: ${{ steps.vars.outputs.CC == 'off' }}
        run: vendor/bin/phpunit --no-coverage

      - name: Run the unit tests with code coverage
        # TODO: this will need fixing
        if: ${{ steps.vars.outputs.CC == 'on' }}
        run: vendor/bin/phpunit

      - name: Upload coverage results to Coveralls PHP 5.4
        if: ${{ steps.vars.outputs.CC == 'on' && success() && startsWith( matrix.coveralls, '^1' )}}
        env:
          #PHP_VERSION: ${{ matrix.php }}
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_PARALLEL: true
          COVERALLS_FLAG_NAME: php-${{ matrix.php }}-phpcs-${{ matrix.phpcs_version }}
        run: vendor/bin/coveralls -v -x build/logs/clover.xml

      - name: Upload coverage results to Coveralls PHP 7/8
        if: ${{ steps.vars.outputs.CC == 'on' && success() && startsWith( matrix.coveralls, '^2' )}}
        env:
          #PHP_VERSION: ${{ matrix.php }}
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_PARALLEL: true
          COVERALLS_FLAG_NAME: php-${{ matrix.php }}-phpcs-${{ matrix.phpcs_version }}
        run: vendor/bin/php-coveralls -v -x build/logs/clover.xml

  coveralls-finish:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
